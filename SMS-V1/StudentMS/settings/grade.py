# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'grade.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

#
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
import sys

sys.path.append("../") # 因为grade.py需要先从当前路径切换到service中
from service import service


class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super(Ui_MainWindow,self).__init__()
        self.setupUi(self)
        self.query()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(872, 648)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(20, 510, 591, 41))
        self.layoutWidget.setObjectName("layoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.editGradeID = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(12)
        self.editGradeID.setFont(font)
        self.editGradeID.setObjectName("editGradeID")
        self.horizontalLayout.addWidget(self.editGradeID)
        self.label_2 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout.addWidget(self.label_2)
        self.editGradeName = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(12)
        self.editGradeName.setFont(font)
        self.editGradeName.setObjectName("editGradeName")
        self.horizontalLayout.addWidget(self.editGradeName)
        self.layoutWidget1 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget1.setGeometry(QtCore.QRect(710, 110, 101, 291))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget1)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.btnAddGrade = QtWidgets.QPushButton(self.layoutWidget1)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.btnAddGrade.setFont(font)
        self.btnAddGrade.setObjectName("btnAddGrade")
        self.verticalLayout.addWidget(self.btnAddGrade)
        self.btnUpdateGrade = QtWidgets.QPushButton(self.layoutWidget1)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.btnUpdateGrade.setFont(font)
        self.btnUpdateGrade.setObjectName("btnUpdateGrade")
        self.verticalLayout.addWidget(self.btnUpdateGrade)
        self.btnDeleteGrade = QtWidgets.QPushButton(self.layoutWidget1)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.btnDeleteGrade.setFont(font)
        self.btnDeleteGrade.setObjectName("btnDeleteGrade")
        self.verticalLayout.addWidget(self.btnDeleteGrade)
        self.btnQuitGrade = QtWidgets.QPushButton(self.layoutWidget1)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.btnQuitGrade.setFont(font)
        self.btnQuitGrade.setObjectName("btnQuitGrade")
        self.verticalLayout.addWidget(self.btnQuitGrade)
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(20, 20, 631, 471))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 872, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.btnAddGrade.clicked.connect(self.add)  # 为添加按钮链接add()一个槽函数

        self.tableWidget.itemClicked.connect(self.getItem)  # 在点击修改时需要为表控件添加一个槽函数，以便获取表中的元素
        self.btnUpdateGrade.clicked.connect(self.edit)  # 为添加（更新数据）按钮链接edit()一个槽函数
        self.btnDeleteGrade.clicked.connect(self.delete_) # 为删除按钮添加槽函数
        self.btnQuitGrade.clicked.connect(self.close)

    def query(self):
        """执行查询操作，自定义一个槽函数，作用：在窗体启动时，将数据库中的年级信息读取出来。"""
        self.tableWidget.setRowCount(0) # 清空表中的所有行
        # 调用公共类中的公共方法查询
        result = service.query('select * from tb_grade;')
        row = len(result) # 获取到数据的行数
        self.tableWidget.setRowCount(row)  # 设置行数
        self.tableWidget.setColumnCount(2) # 应为有2个字段所以要设置2列
        self.tableWidget.setHorizontalHeaderLabels(['年级编号','年级名称'])  # 设置表格的标题
        for i in range(row):
            for j in range(self.tableWidget.columnCount()):
                date_single = QTableWidgetItem(str(result[i][j]))  # 将数据处理为表格控件能接受的数据对象
                self.tableWidget.setItem(i, j, date_single) # 将数据依次放入表格中

    def getName(self,name):     # (name,) 元组类型，其中只有一个函数时就要加一个，。
        """到数据库中查找看是否有 name年级名称 的存在"""
        result = service.query('select * from tb_grade where gradeName = %s;',(name,))
        return len(result)

    def add(self):
        """执行添加操作前，需要获取添加的年级名称和年级ID"""
        gradeid = self.editGradeID.text()
        gradename  = self.editGradeName.text()
        if gradeid != '' and gradename != '':
            if self.getName(gradename) > 0:  # 说明要添加的数据在数据库中已经存在
                self.editGradeName.setText('')
                QMessageBox.information(None, '提示', '年级名称已经存在！请重新输入！！')
            else:
                resl = service.execute('insert into tb_grade(gradeID,gradeName) values (%s,%s)', (gradeid, gradename))
                if resl > 0:
                    self.query()  # 重新加载表格数据
                    QMessageBox.information(None, '提示', '信息添加成功了！', QMessageBox.Ok)
        else:
            QMessageBox.warning(None,'警告','年级编号或者年级名称不能为空！',QMessageBox.Ok)

    def getItem(self,item):
        """获取选中的表格内容，item代表鼠标点击的那一行"""
        if item.column() == 0:  # 第一列是编号
            self.select = item.text()
            self.editGradeID.setText(self.select)   # 将点击获得的年级编个放到输入框中


        # if item.column() == 1:  # 第二列是编号
        #     self.select = item.text()
        #     self.editGradeName.setText(self.select)   # 将点击获得的年级编个放到输入框中

    def edit(self):
        """用于执行修改操作的函数"""
        try:
            if self.select != '': # 判断年级编号是否有值
                gradeName = self.editGradeName.text()
                if gradeName != '': # 如果年级名称也有了，就到数据库中看看是否已经存在数据
                    if self.getName(gradeName) > 0:
                        QMessageBox.information(None,'提示','要修改的年级名称已经存在！',QMessageBox.Ok)
                    else:
                        resl = service.execute('update tb_grade set gradeName=%s where gradeid=%s',(gradeName,self.select))
                        if resl > 0:
                            self.query()
                            QMessageBox.information(None,'提示','数据已经修改成功了！',QMessageBox.Ok)
                else:
                    QMessageBox.warning(None, '警告', '年级名称不能为空！', QMessageBox.Ok)
        except Exception as e:
            print(e)
            QMessageBox.warning(None,'警告','请选中需要修改的数据！',QMessageBox.Ok)

    def delete_(self):
        try:
            if self.select != '':  # 删除年级表中的数据
                res = service.execute('delete from tb_grade where gradeID=%s',(self.select,))
                if res > 0:
                    self.query()
                    QMessageBox.information(None,'提示','删除成功!',QMessageBox.Ok)
        except Exception as e:
            print(e)
            QMessageBox.warning(None,'警告','请选择要删除的数据!',QMessageBox.Ok)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "年级设置"))
        self.label.setText(_translate("MainWindow", "年级编号："))
        self.label_2.setText(_translate("MainWindow", "年级名称："))
        self.btnAddGrade.setText(_translate("MainWindow", "增加"))
        self.btnUpdateGrade.setText(_translate("MainWindow", "修改"))
        self.btnDeleteGrade.setText(_translate("MainWindow", "删除"))
        self.btnQuitGrade.setText(_translate("MainWindow", "退出"))

