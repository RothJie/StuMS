# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'student.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
import sys
sys.path.append('../')
from service import service


class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super(Ui_MainWindow,self).__init__()
        self.setupUi(self)
        self.bindGrade()
        self.query()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1126, 892)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(30, 170, 1071, 691))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(40, 80, 81, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(240, 80, 81, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(530, 80, 41, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(680, 80, 41, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(40, 130, 81, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(410, 130, 81, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.editStuName = QtWidgets.QLineEdit(self.centralwidget)
        self.editStuName.setGeometry(QtCore.QRect(320, 80, 151, 31))
        self.editStuName.setObjectName("editStuName")
        self.editStuID = QtWidgets.QLineEdit(self.centralwidget)
        self.editStuID.setGeometry(QtCore.QRect(120, 80, 111, 31))
        self.editStuID.setObjectName("editStuID")
        self.editPhone = QtWidgets.QLineEdit(self.centralwidget)
        self.editPhone.setGeometry(QtCore.QRect(120, 130, 231, 31))
        self.editPhone.setObjectName("editPhone")
        self.editAge = QtWidgets.QLineEdit(self.centralwidget)
        self.editAge.setGeometry(QtCore.QRect(580, 80, 61, 31))
        self.editAge.setObjectName("editAge")
        self.editAddress = QtWidgets.QLineEdit(self.centralwidget)
        self.editAddress.setGeometry(QtCore.QRect(490, 130, 231, 31))
        self.editAddress.setObjectName("editAddress")
        self.cboSex = QtWidgets.QComboBox(self.centralwidget)
        self.cboSex.setGeometry(QtCore.QRect(730, 80, 71, 31))
        self.cboSex.setObjectName("cboSex")
        self.cboSex.addItem("男")  # 为性别下拉框添加值
        self.cboSex.addItem("女")

        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(680, 10, 401, 61))
        self.widget.setObjectName("widget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.btnAdd = QtWidgets.QPushButton(self.widget)
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.btnAdd.setFont(font)
        self.btnAdd.setObjectName("btnAdd")
        self.horizontalLayout.addWidget(self.btnAdd)
        self.btnUpdate = QtWidgets.QPushButton(self.widget)
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.btnUpdate.setFont(font)
        self.btnUpdate.setObjectName("btnUpdate")
        self.horizontalLayout.addWidget(self.btnUpdate)
        self.btnDelete = QtWidgets.QPushButton(self.widget)
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.btnDelete.setFont(font)
        self.btnDelete.setObjectName("btnDelete")
        self.horizontalLayout.addWidget(self.btnDelete)
        self.btnQuit = QtWidgets.QPushButton(self.widget)
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.btnQuit.setFont(font)
        self.btnQuit.setObjectName("btnQuit")
        self.horizontalLayout.addWidget(self.btnQuit)
        self.widget1 = QtWidgets.QWidget(self.centralwidget)
        self.widget1.setGeometry(QtCore.QRect(40, 20, 491, 41))
        self.widget1.setObjectName("widget1")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget1)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label = QtWidgets.QLabel(self.widget1)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.horizontalLayout_2.addWidget(self.label)
        self.cboGrade = QtWidgets.QComboBox(self.widget1)
        self.cboGrade.setObjectName("cboGrade")
        self.horizontalLayout_2.addWidget(self.cboGrade)
        self.label_2 = QtWidgets.QLabel(self.widget1)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        self.cboClass = QtWidgets.QComboBox(self.widget1)
        self.cboClass.setObjectName("cboClass")
        self.horizontalLayout_2.addWidget(self.cboClass)
        self.btnReFrash = QtWidgets.QPushButton(self.widget1)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.btnReFrash.setFont(font)
        self.btnReFrash.setObjectName("btnReFrash")
        self.horizontalLayout_2.addWidget(self.btnReFrash)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1126, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.btnQuit.clicked.connect(self.close)  # 链接关闭按钮
        self.cboGrade.currentIndexChanged.connect(self.bindClass) # 年级组合框被改变时班级组合框中的数据也随之发生改变
        self.btnReFrash.clicked.connect(self.query) # 将刷新按钮绑定qury()这个槽函数
        self.btnAdd.clicked.connect(self.add)  # 为更新按钮槽函数add()
        self.tableWidget.itemClicked.connect(self.getItem) # 为表格项的单击
        self.btnUpdate.clicked.connect(self.edit)  # 为修改绑定槽函数
        self.btnDelete.clicked.connect(self.delect_) # 为删除绑定槽函数

    def bindGrade(self):
        """为年级组合框做数据查询，并且需要设置初始化"""
        self.cboGrade.addItem("全部")
        result = service.query('select gradeName from tb_grade;')
        for i in result:
            self.cboGrade.addItem(i[0])

    def bindClass(self):
        """为班级的组合框查询数据，并绑定"""
        self.cboClass.clear() # 清空下拉组合中的内容
        self.cboClass.addItem("全部")
        result = service.query('select className from v_classinfo WHERE gradeName = %s;',self.cboGrade.currentText())
        for item in result:
            self.cboClass.addItem(item[0])

    def query(self):
        """从v_studentInfo中将数据查询出来，并放到表格中"""
        self.tableWidget.setRowCount(0)  # 查询之前需要将表格中现有的数据清空
        gname = self.cboGrade.currentText() # 获取当前选择的年级名称
        cname = self.cboClass.currentText() # 获取当前选中的班级名称

        if gname == '全部':
            result = service.query("SELECT stuID,stuName,CONCAT(gradeName,' ',className),sex,age,address,phone FROM v_studentinfo;")
        if gname != '全部' and cname == '全部': # 查询指定年级的所有班级里的学生。
            result = service.query("SELECT stuID,stuName,CONCAT(gradeName,' ',className),sex,age,address,phone FROM v_studentinfo where gradeName = %s;",gname)
        if gname != '全部' and cname != '全部': # 查询指定年级下的指定班级下的所有学生。
            result = service.query("SELECT stuID,stuName,CONCAT(gradeName,' ',className),sex,age,address,phone FROM v_studentinfo where gradeName = %s and className = %s;",gname,cname)

        row = len(result)
        self.tableWidget.setRowCount(row)
        self.tableWidget.setColumnCount(7)
        self.tableWidget.setHorizontalHeaderLabels(['学生编号','学生姓名','班  级','性  别','年  龄','家庭地址','联系电话'])
        for i in range(row):
            for j in range(self.tableWidget.columnCount()):
                data = QTableWidgetItem(str(result[i][j]))  # 将每一个数据加载成QTableWidgetItem
                self.tableWidget.setItem(i, j, data) # 将数据添加到表格控件中去

    def getName(self,stuId):
        """获取数据stuName依据stuId"""
        result = service.query("SELECT stuName FROM tb_student WHERE stuID = %s;",stuId)
        return len(result)

    def add(self):
        """添加数据的槽函数"""
        stuId = self.editStuID.text()
        stuName = self.editStuName.text()
        sex = self.cboSex.currentText()
        age = self.editAge.text()
        address = self.editAddress.text()
        phone = self.editPhone.text()

        if self.cboGrade.currentText() != '全部':
            # 根据年级的名称查询当前选择的ID
            result = service.query('SELECT gradeID FROM tb_grade WHERE gradeName = %s;',self.cboGrade.currentText())
            if len(result) > 0:
                gradeId = result[0][0]
                if self.cboClass.currentText() != '全部':
                    # 根据班级的名称去查询班级的编号（需要考虑年级，原因：不同年级会有相同名字的班级）
                    res = service.query('SELECT classID FROM tb_class WHERE className = %s AND gradeID = %s;',
                                           self.cboClass.currentText(),gradeId)  # 这里查到的数据可能是多个
                    if len(res) > 0:
                        classId = res[0][0]
                        # 接下来判断学号和姓名是否为空
                        if stuId != "" and stuName != "":
                            # 判断学生的id是否已经存在于数据库之中
                            if self.getName(stuId) > 0:
                                self.editStuID.setText('')
                                QMessageBox.information(None,'提示','该学生的信息已经存在！请重新输入！！！',QMessageBox.Ok)
                            else:
                                resul = service.execute("INSERT INTO tb_student(stuID,stuName,classID,gradeID,age,sex,phone,address) VALUES(%s,%s,%s,%s,%s,%s,%s,%s);",(stuId,stuName,classId,gradeId,age,sex,phone,address))
                                if resul > 0:
                                    self.cboGrade.setCurrentText("全部")
                                    self.cboClass.setCurrentText("全部")
                                    self.editAge.clear()
                                    self.editAddress.clear()
                                    self.editPhone.clear()
                                    self.editStuID.clear()
                                    self.editStuName.clear()
                                    self.query()
                                    QMessageBox.information(None,'提示','信息添加成功！',QMessageBox.Ok)
                        else:
                            QMessageBox.warning(None,"警告","学生的学号或姓名不能为空！",QMessageBox.Ok)

                else:
                    QMessageBox.warning(None, '警告', '请选择班级！', QMessageBox.Ok)
        else:
            QMessageBox.warning(None,'警告','请选择年级！',QMessageBox.Ok)

    def getItem(self,item:QTableWidgetItem):
        if item.column() == 0:
            self.select = item.text()
            self.editStuID.setText(self.select)

            row = item.row()
            cols = self.tableWidget.columnCount()
            row_data = [self.tableWidget.item(row,col).text() for col in range(cols)]
            self.editStuName.setText(row_data[1])
            self.cboGrade.setCurrentText(row_data[2].split(" ")[0])
            self.cboClass.setCurrentText(row_data[2].split(" ")[1])
            self.cboSex.setCurrentText(row_data[3])
            self.editAge.setText(row_data[4])
            self.editAddress.setText(row_data[5])
            self.editPhone.setText(row_data[6])

    def edit(self):
        try:
            if self.select != "":
                stuSex = self.cboSex.currentText()
                stuName = self.editStuName.text()
                stuAge = self.editAge.text()
                stuAddress = self.editAddress.text()
                stuPhone = self.editPhone.text()

                resu = service.execute("UPDATE tb_student SET stuName=%s,age=%s,sex=%s,phone=%s,address =%s  WHERE stuID = %s;",
                                (stuName,stuAge,stuSex,stuPhone,stuAddress,self.select))
                if resu > 0:
                    self.cboGrade.setCurrentText("全部")
                    self.cboClass.setCurrentText("全部")
                    self.editAge.clear()
                    self.editAddress.clear()
                    self.editPhone.clear()
                    self.editStuID.clear()
                    self.editStuName.clear()
                    self.query()
                    QMessageBox.information(None, '提示', '修改数据成功了！', QMessageBox.Ok)
            else:
                QMessageBox.warning(None, '警告', '请先选择需要修改的数据！！', QMessageBox.Ok)
        except Exception as e:
            print(e)
            QMessageBox.warning(None,'警告','请先选择需要修改的数据！！',QMessageBox.Ok)

    def delect_(self):
        try:
            if self.select != "":
                res = service.query("SELECT * FROM tb_student WHERE stuID = %s;",self.select)
                if len(res) > 0:
                    resu = QMessageBox.warning(None,'警告','请确认是否需要删除该学生！！！学生信息删除后不能恢复！',QMessageBox.Yes|QMessageBox.Cancel)
                    if resu == QMessageBox.Yes:
                        resu = service.execute("DELETE FROM tb_student WHERE stuID = %s;",(self.select,))
                        if resu > 0:
                            self.editStuName.clear()
                            self.cboGrade.setCurrentText("全部")
                            self.cboClass.setCurrentText("全部")
                            self.cboSex.setCurrentText("男")
                            self.editAge.clear()
                            self.editAddress.clear()
                            self.editPhone.clear()
                            self.editStuID.clear()
                            self.query()
                            QMessageBox.information(None, '提示', '学生信息删除成功!', QMessageBox.Ok)
                    else:
                        self.cboGrade.setCurrentText("全部")
                        self.cboClass.setCurrentText("全部")
                        self.editAge.clear()
                        self.editAddress.clear()
                        self.editPhone.clear()
                        self.editStuID.clear()
                        self.editStuName.clear()
                else:
                    QMessageBox.information(None,'提示',"该学生信息不存在！或已经被删除了！")
        except Exception as e:
            print(e)
            QMessageBox.warning(None, '警告', '请先选择需要删除的数据！！', QMessageBox.Ok)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "学生信息管理"))
        self.label_3.setText(_translate("MainWindow", "学生编号："))
        self.label_4.setText(_translate("MainWindow", "学生姓名："))
        self.label_5.setText(_translate("MainWindow", "年龄："))
        self.label_6.setText(_translate("MainWindow", "性别："))
        self.label_7.setText(_translate("MainWindow", "联系电话："))
        self.label_9.setText(_translate("MainWindow", "家庭住址："))
        self.btnAdd.setText(_translate("MainWindow", "添加"))
        self.btnUpdate.setText(_translate("MainWindow", "修改"))
        self.btnDelete.setText(_translate("MainWindow", "删除"))
        self.btnQuit.setText(_translate("MainWindow", "退出"))
        self.label.setText(_translate("MainWindow", "所属年级："))
        self.label_2.setText(_translate("MainWindow", "所属班级："))
        self.btnReFrash.setText(_translate("MainWindow", "刷新"))
